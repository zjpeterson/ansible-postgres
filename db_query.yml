---
- name: Ensure user has SELECT privs
  hosts: all # expecting a limit, not applying any further restriction
  gather_facts: false
  become: true
  become_user: postgres

  tasks:
    - name: Ensure query user
      community.postgresql.postgresql_user:
        db: "{{ db_name }}"
        name: "{{ cred_username }}"
        password: "{{ cred_password }}"

    - name: Ensure user permission
      community.postgresql.postgresql_privs:
        db: "{{ db_name }}"
        privs: SELECT
        roles: "{{ cred_username }}"
        type: table
        schema: public
        objs: ALL_IN_SCHEMA

    - name: Allow remote connections
      community.postgresql.postgresql_pg_hba:
        dest: /var/lib/pgsql/data/pg_hba.conf
        source: 0.0.0.0/0
        contype: host
        users: "{{ cred_username }}"
        databases: "{{ db_name }}"
      notify: Restart postgresql

  handlers:
    - name: Restart postgresql
      ansible.builtin.service:
        name: postgresql
        state: restarted
      become_user: root

- name: Make query and save results
  hosts: all
  connection: local

  tasks:
    - name: Execute query
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        login_user: "{{ cred_username }}"
        login_password: "{{ cred_password }}"
        login_host: "{{ ansible_limit }}"
        query: "{{ db_query }}"
      delegate_to: localhost
      register: _query

    # - name: Copy results to file
    #   ansible.builtin.copy:
    #     dest: "{{ playbook_dir }}/query_{{ inventory_hostname }}_{{ ansible_date_time.iso8601 }}.csv"
    #     content: |
    #       {{ _query.query_result.0.keys() | join(',') }}
    #       {% for row in _query.query_result %}
    #       {{ row.values() | join(',') }}
    #       {% endfor %}

    - name: Create S3 bucket
      amazon.aws.s3_bucket:
        name: queries202501
        state: present
        region: us-east-2

    - name: Upload file
      amazon.aws.s3_object:
        bucket: queries202501
        mode: put
        object: "{{ inventory_hostname }}/{{ db_name }}/{{ ansible_date_time.iso8601 }}.csv"
        content: |
          {{ _query.query_result.0.keys() | join(',') }}
          {% for row in _query.query_result %}
          {{ row.values() | join(',') }}
          {% endfor %}
